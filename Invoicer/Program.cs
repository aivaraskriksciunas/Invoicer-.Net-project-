using Invoicer.Core.Data;
using Microsoft.EntityFrameworkCore;
using Invoicer.Configuration;
using Invoicer.Core.Data.Models;
using Invoicer.Api.Configuration;
using Invoicer.Data;
using Invoicer.Api;

var builder = WebApplication.CreateBuilder(args);

if ( builder.Environment.IsProduction() ) {
    //builder.Services.AddDbContext<InvoicerDbContext>( 
    //    options => options.UseSqlServer( 
    //        builder.Configuration.GetConnectionString( "InvoicerDb" ),
    //        options => options.EnableRetryOnFailure() 
    //    )
    //);
}
else {
    builder.Services.AddDbContext<InvoicerDbContext>(
        options => options.UseNpgsql(
            builder.Configuration.GetConnectionString( "InvoicerDb" ),
            builder => builder.MigrationsAssembly( "Invoicer" )
        )
    );
}


builder.Services.AddInvoicerIdentity();
builder.Services.AddRepositories();
builder.Services.AddApiServices();

builder.Services.AddApiDocumentation();

builder.Services.AddCors( options =>
{
    options.AddDefaultPolicy(
        policy =>
        {
            policy.WithOrigins( "http://localhost:3000" )
                .AllowCredentials()
                .AllowAnyHeader()
                .AllowAnyMethod();
        } );
} );

builder.Services.AddControllers();


var app = builder.Build();

app.UseCors();

// Add auth routes
if (app.Environment.IsDevelopment())
{
    app.UseApiDocumentationUI();
}

app.UseCookiePolicy();

app.UseStaticFiles();
app.UseAuthentication();
app.UseAuthorization();

// Required for pages generated by identity
app.MapRazorPages();

// Map controllers with areas
app.MapControllerRoute(
    name: "areas",
    pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}"
);

// Default route
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

// Run initial database seed
using (var scope = app.Services.CreateScope())
{
    var seeder = scope.ServiceProvider.GetService<IDatabaseSeeder>();
    await seeder.SeedData();
}

app.Run();

public partial class Program { }