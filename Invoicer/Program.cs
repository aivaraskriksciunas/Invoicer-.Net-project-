using Invoicer.Data;
using Microsoft.EntityFrameworkCore;
using Invoicer.Configuration;
using Microsoft.OpenApi.Models;
using Invoicer.Data.Models;

var builder = WebApplication.CreateBuilder(args);

if ( builder.Environment.IsProduction() ) {
    builder.Services.AddDbContext<InvoicerDbContext>( 
        options => options.UseSqlServer( 
            builder.Configuration.GetConnectionString( "InvoicerDb" ),
            options => options.EnableRetryOnFailure() 
        )
    );
}
else {
    builder.Services.AddDbContext<InvoicerDbContext>( 
        options => options.UseSqlite( 
            builder.Configuration.GetConnectionString( "InvoicerDbSqlite" )
        )
    );
}


builder.Services.AddInvoicerIdentity();
builder.Services.AddRepositories();

builder.Services.AddSwaggerGen();
builder.Services.AddEndpointsApiExplorer();


builder.Services.AddCors( options =>
{
    options.AddDefaultPolicy(
        policy =>
        {
            policy.AllowAnyOrigin()
                .AllowAnyMethod()
                .AllowAnyMethod();
        } );
} );



var app = builder.Build();

// Run initial database seed
await app.AddAdminUserAsync();

app.UseCors();

// Add auth routes
app.MapIdentityApi<User>();

if ( app.Environment.IsDevelopment() )
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseStaticFiles();
app.UseAuthentication();
app.UseAuthorization();

// Required for pages generated by identity
app.MapRazorPages();

// Map controllers with areas
app.MapControllerRoute(
    name: "areas",
    pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}"
);

// Default route
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");


app.Run();
